#!/bin/bash

echo "Timer started."
echo "Press 'p' to pause/resume, Ctrl+C to stop."
echo ""

# Store the start time and initialize variables
start_time=$(date +%s)
paused_time=0
is_paused=false
pause_start=0

# Function to format time
format_time() {
    local elapsed=$1
    local hours=$((elapsed / 3600))
    local minutes=$(( (elapsed % 3600) / 60 ))
    local seconds=$((elapsed % 60))
    printf "%02d:%02d:%02d" $hours $minutes $seconds
}

# Function to handle exit
cleanup() {
    local current_time=$(date +%s)
    local total_elapsed=$elapsed_seconds
    local formatted_time=$(format_time $total_elapsed)
    echo -e "\n\nTimer stopped. Total elapsed time: $formatted_time"
    # Reset terminal settings
    stty echo
    exit 0
}

# Function to toggle pause state
toggle_pause() {
    if $is_paused; then
        # Resume: calculate how long we were paused and add to total paused time
        local current=$(date +%s)
        paused_time=$((paused_time + current - pause_start))
        is_paused=false
        echo -e "\rTimer resumed                            "
    else
        # Pause: record when we paused
        pause_start=$(date +%s)
        is_paused=true
        echo -e "\rTimer paused                             "
    fi
}

# Set up terminal to capture keystrokes without requiring Enter
stty -echo
stty cbreak

# Register the cleanup function for Ctrl+C and ensure terminal is reset
trap cleanup INT
trap 'stty echo; exit' TERM

# Function to check for user input
check_input() {
    if read -t 0.1 -n 1 key; then
        if [[ "$key" == "p" ]]; then
            toggle_pause
        fi
    fi
}

# Main loop
while true; do
    # Check for key presses
    check_input
    
    # Only update time if not paused
    if ! $is_paused; then
        current_time=$(date +%s)
        # Calculate elapsed time minus the time spent paused
        elapsed_seconds=$((current_time - start_time - paused_time))
        formatted_time=$(format_time $elapsed_seconds)
        # Display time
        printf "\rElapsed time: %s" "$formatted_time"
    fi
    
    sleep 0.1
done
